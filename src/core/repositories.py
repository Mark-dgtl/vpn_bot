from typing import Protocol, Optional, List
from src.core.entities import (
    User,
    Subscription,
    Peer,
    Payment,
    TrafficUsage,
    Notification,
    Server,
    Referral,
    Admin,
    Order,
    SubscriptionPlan
)

class UserRepo(Protocol):
    def find_by_chat_id(self, chat_id: int) -> Optional[User]: ...
    def create(self, user: User) -> User: ...
    def update(self, user: User) -> User: ...
    def block_user(self, chat_id: int) -> None: ...
    def get_all_active(self) -> List[User]: ...

class SubscriptionRepo(Protocol):
    def find_active_by_user(self, user_id: int) -> Optional[Subscription]: ...
    def create(self, subscription: Subscription) -> Subscription: ...
    def update_status(self, sub_id: str, status: str) -> None: ...
    def find_by_id(self, sub_id: str) -> Optional[Subscription]: ...
    def get_all_expired(self) -> List[Subscription]: ...

class SubscriptionPlanRepo(Protocol):
    def find_by_name(self, name: str) -> SubscriptionPlan: ...
    def list_all(self) -> List[SubscriptionPlan]: ...
    def get_by_price_range(self, min_price: float, max_price: float) -> List[SubscriptionPlan]: ...

class PaymentRepo(Protocol):
    def create(self, payment: Payment) -> Payment: ...
    def find_by_id(self, payment_id: str) -> Optional[Payment]: ...
    def find_by_order(self, order_id: str) -> Optional[Payment]: ...
    def update_status(self, payment_id: str, status: str) -> None: ...
    def get_successful_by_user(self, user_id: int) -> List[Payment]: ...

class OrderRepo(Protocol):
    def create(self, order: Order) -> Order: ...
    def find_by_id(self, order_id: str) -> Optional[Order]: ...
    def update_status(self, order_id: str, status: str) -> None: ...
    def get_pending_orders(self) -> List[Order]: ...

class PeerRepo(Protocol):
    def find_by_user(self, user_id: int) -> List[Peer]: ...
    def find_by_id(self, peer_id: str) -> Optional[Peer]: ...
    def create(self, peer: Peer) -> Peer: ...
    def freeze(self, user_id): ...
    def revoke(self, peer_id: str) -> None:  ...
    def get_count_by_user(self, user_id: int) -> int: ...

class TrafficUsageRepo(Protocol):
    def find_by_user(self, user_id: int) -> Optional[TrafficUsage]: ...
    def increment_usage(self, user_id: int, bytes_used: int) -> None: ...
    def reset_usage(self, user_id: int) -> None: ...
    def get_daily_usage(self, user_id: int, date: str) -> int: ...

class NotificationRepo(Protocol):
    def create(self, notification: Notification) -> Notification: ...
    def find_unread_by_user(self, user_id: int) -> List[Notification]: ...
    def mark_as_read(self, notification_id: str) -> None: ...
    def get_count_by_user(self, user_id: int) -> int: ...

class ServerRepo(Protocol):
    def list_all(self) -> List[Server]: ...
    def find_by_id(self, server_id: str) -> Server: ...
    def update_status(self, server_id: str, status: str) -> None: ...
    def get_available_servers(self) -> List[Server]: ...
    def increment_load(self, server_id: str, value: int) -> None: ...

class ReferralRepo(Protocol):
    def find_by_code(self, code: str) -> Optional[Referral]: ...
    def create(self, referral: Referral) -> Referral: ...
    def mark_as_used(self, referral_id: str) -> None: ...
    def get_by_user(self, user_id: int) -> Optional[Referral]: ...

class AdminRepo(Protocol):
    def find_by_user_id(self, user_id: int) -> Optional[Admin]: ...
    def create(self, admin: Admin) -> Admin: ...
    def list_all(self) -> List[Admin]: ...
    def revoke_access(self, user_id: int) -> None: ...

